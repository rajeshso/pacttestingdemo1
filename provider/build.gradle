buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$versions.springBoot")
    }
}

plugins {
    id "com.gorylenko.gradle-git-properties" version "1.5.1"
    id "au.com.dius.pact" version "3.5.24"
}

apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
description = "provider"
//The group and version are very important
group 'com.n2.my-pacts'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    all*.exclude module: 'tomcat-annotations-api'
}

dependencies {
    compile libs.h2
//    compile libs.liquibase
    compile libs.springBootJpa
    compile libs.springBootWeb
    compile libs.springBootActuator
    compile libs.logStash
    compile libs.micrometerCore
    compile libs.micrometerPrometheus
    compile libs.springSleuth
    compile libs.springfoxSwagger2
    compile libs.springfoxSwaggerUi
    compile libs.springBootJpa
    compile libs.tomcatJdbc

    compile(libs.mysql) {
        exclude group: 'com.google.protobuf'
    }

    testCompile (libs.springBootStarterTest) {
        exclude group:'org.mockito'
    }
    testCompile libs.powerMockAPI
    testCompile libs.powerMockJunit

    compileOnly libs.lombok
    testCompileOnly libs.lombok
    annotationProcessor libs.lombok
    testAnnotationProcessor libs.lombok
    testCompile 'au.com.dius:pact-jvm-provider-spring_2.12:3.5.24'

}

jar {
    enabled = true
}

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("$buildDir/reports/jacoco/html")
    }
}

test {
    finalizedBy jacocoTestReport
    systemProperties['pact.rootDir'] = "$buildDir/pacts"
    systemProperties['pact.verifier.publishResults'] = "true"
}

ext.gitRevision = { ->
    def revision = new ByteArrayOutputStream()
    exec {
        commandLine "git", "log", "-n", "1", "--format='%h'"
        standardOutput = revision
    }
    return revision.toString().trim().replaceAll("'","")
}